{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "tenantId": {
            "type": "string",
            "metadata": {
                "description": "Tenant Id"
            }
        },
        "clientId": {
            "type": "string",
            "metadata": {
                "description": "Client/Application Id"
            }
        },
        "certificateThumbprint": {
            "type": "string",
            "metadata": {
                "description": "Certificate Thumbprint"
            }
        },
        "certificatePfxPassword": {
            "type": "string",
            "metadata": {
                "description": "Certificate Password"
            }
        },
        "certificatePfxBase64": {
            "type": "string",
            "metadata": {
                "description": "Base 64 encoded certificate file"
            }
        },
        "mailboxAddress": {
            "type": "string",
            "metadata": {
                "description": "Email address of the shared EXO mailbox sending the welcome email"
            }
        },
        "emailSubject": {
            "type": "string",
            "defaultValue": "Site Ownership Terms of Service",
            "metadata": {
                "description": "Subject of the welcome email"
            }
        },
        "emailBody": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Body of the welcome email"
            }
        },
        "fallbackEmailAddress": {
            "type": "string",
            "metadata": {
                "description": "Fallback email address for email failed group owner lookup email notices"
            }
        },
        "functionCode": {
            "type": "string",
            "defaultValue": "param($QueueItem, $TriggerMetadata)",
            "metadata": {
                "description": "PowerShell code for the Azure Queue trigger function"
            }
        },
        "productionDate": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Date solution turns production."
            }
        },
        "pilotEmailAddresses": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Semi-colon separated list of pilot email addresses."
            }
        }    
    },
    "functions": [
    ],
    "variables": {
        "queueName": "ps-queue-items",
        "storageAccountApiConnectionName": "[format('apiconnection-storage-{0}', uniqueString(resourceGroup().id))]",
        "office365ApiConnectionName": "[format('apiconnection-office365-{0}', uniqueString(resourceGroup().id))]",
        "applicationName": "[format('application-{0}', uniqueString(resourceGroup().id))]",
        "functionAppName": "[format('functionapp-{0}', uniqueString(resourceGroup().id))]",
        "applicationInsightsName": "[format('appinsights-{0}', uniqueString(resourceGroup().id))]",
        "logAnalyticsName": "[format('workspace-{0}', uniqueString(resourceGroup().id))]",
        "functionName": "[format('function-{0}', 'SendEmailToGroupOwners')]",
        "queueMsgLogicAppName": "[format('logic-queuemsg-{0}', uniqueString(resourceGroup().id))]",
        "sendEmailLogicAppName": "[format('logic-sendemail-{0}', uniqueString(resourceGroup().id))]",
        "storageAccountName": "[format('storageacct{0}', uniqueString(resourceGroup().id))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2021-04-01",
            "location": "[resourceGroup().location]",
            "kind": "StorageV2",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "supportsHttpsTrafficOnly": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "resourceAccessRules": [],
                    "defaultAction": "Allow"
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices",
            "apiVersion": "2021-06-01",
            "name": "[concat(variables('storageAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "metadata": {}
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('storageAccountName'), '/default/', variables('queueName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', variables('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "metadata": {}
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
            "apiVersion": "2021-08-01",
            "name": "[concat(variables('storageAccountName'), '/default/', variables('queueName'), '-poison')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', variables('storageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "metadata": {}
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "name": "[variables('applicationName')]",
            "apiVersion": "2020-12-01",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Y1",
                "capacity": 1
            },
            "properties": {
                "name": "[variables('applicationName')]"
            }
        },
        {
            "name": "[variables('functionAppName')]",
            "type": "Microsoft.Web/sites",
            "apiVersion": "2020-12-01",
            "location": "[resourceGroup().location]",
            "kind": "functionapp",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('applicationName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Logic/workflows', variables('sendEmailLogicAppName'))]",
                "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('applicationName'))]",
                "siteConfig": {
                    "powerShellVersion": "~7",
                    "appSettings": [
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(variables('functionAppName'))]"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02-preview').InstrumentationKey]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~4"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "powershell"
                        },
                        {
                            "name": "SPO_CLIENTID",
                            "value": "[parameters('clientId')]"
                        },
                        {
                            "name": "SPO_TENANTID",
                            "value": "[parameters('tenantId')]"
                        },
                        {
                            "name": "SPO_THUMBPRINT",
                            "value": "[parameters('certificateThumbprint')]"
                        },
                        {
                            "name": "SEND_EMAIL_ENDPOINT_URI",
                            "value": "[listCallbackURL(resourceId('Microsoft.Logic/workflows/triggers', variables('sendEmailLogicAppName'), 'manual'), '2019-05-01').value]"
                        },
                        {
                            "name": "FAILURE_EMAIL_ADDRESS",
                            "value": "[parameters('fallbackEmailAddress')]"
                        },
                        {
                            "name": "PRODUCTION_DATE",
                            "value": "[parameters('productionDate')]"
                        },
                        {
                            "name": "PILOT_EMAIL_ADDRESSES",
                            "value": "[parameters('pilotEmailAddresses')]"
                        },
                        {
                            "name": "WEBSITE_LOAD_CERTIFICATES",
                            "value": "[parameters('certificateThumbprint')]"
                        }
                    ]
                }
            }
        },
        {
            "name": "[format('{0}/{1}', variables('functionAppName'), variables('functionName'))]",
            "type": "Microsoft.Web/sites/functions",
            "apiVersion": "2020-12-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
            ],
            "properties": {
                "name": "[variables('functionName')]",
                "config": {
                    "disabled": false,
                    "bindings": [
                        {
                            "name": "QueueItem",
                            "type": "queueTrigger",
                            "direction": "in",
                            "queueName": "[variables('queueName')]",
                            "connection": "AzureWebJobsStorage"
                        }
                    ]
                },
                "language": "powershell",
                "files": {
                    "run.ps1": "[parameters('functionCode')]"
                }
            }
        },
        {
            "name": "[parameters('certificateThumbprint')]",
            "type": "Microsoft.Web/certificates",
            "apiVersion": "2015-08-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('applicationName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "properties": {
                "pfxBlob": "[parameters('certificatePfxBase64')]",
                "password": "[parameters('certificatePfxPassword')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('applicationName'))]"
            }
        },
        {
            "name": "[variables('storageAccountApiConnectionName')]",
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('storageAccountApiConnectionName')]",
                "statuses": [
                    {
                        "status": "Connected"
                    }
                ],
                "customParameterValues": {},
                "api": {
                    "name": "[variables('storageAccountApiConnectionName')]",
                    "displayName": "Azure Queues",
                    "description": "Azure Queue storage provides cloud messaging between application components. Queue storage also supports managing asynchronous tasks and building process work flows.",
                    "iconUri": "https://connectoricons-prod.azureedge.net/releases/v1.0.1546/1.0.1546.2665/azurequeues/icon.png",
                    "brandColor": "#0072C6",
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azurequeues')]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "parameterValues": {
                    "storageaccount": "[variables('storageAccountName')]",
                    "sharedkey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value]"
                },
                "testLinks": [
                    {
                        "requestUri": "[concat('https://management.azure.com:443/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/', variables('storageAccountApiConnectionName'), '/extensions/proxy/testConnection?api-version=2016-06-01')]",
                        "method": "get"
                    }
                ]
            }
        },
        {
            "name": "[variables('office365ApiConnectionName')]",
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('office365ApiConnectionName')]",
                "statuses": [
                    {
                        "status": "Connected"
                    }
                ],
                "customParameterValues": {},
                "api": {
                    "name": "[variables('office365ApiConnectionName')]",
                    "displayName": "Office 365 Outlook",
                    "description": "Microsoft Office 365 is a cloud-based service that is designed to help meet your organization's needs for robust security, reliability, and user productivity.",
                    "iconUri": "https://connectoricons-prod.azureedge.net/releases/v1.0.1538/1.0.1538.2621/office365/icon.png",
                    "brandColor": "#0078D4",
                    "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "testLinks": [
                    {
                        "requestUri": "[concat('https://management.azure.com:443/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/', variables('office365ApiConnectionName'), '/extensions/proxy/testConnection?api-version=2016-06-01')]",
                        "method": "get"
                    }
                ]
            }
        },
        {
            "name": "[variables('queueMsgLogicAppName')]",
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('storageAccountApiConnectionName'))]"
            ],
            "location": "[resourceGroup().location]",
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/schemas/2016-06-01/Microsoft.Logic.json",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "parameters": {
                                            "type": "object",
                                            "properties": {
                                                "event": {
                                                    "type": "string"
                                                },
                                                "product": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "webUrl": {
                                            "type": "string"
                                        },
                                        "webTitle": {
                                            "type": "string"
                                        },
                                        "webDescription": {
                                            "type": "string"
                                        },
                                        "creatorName": {
                                            "type": "string"
                                        },
                                        "creatorEmail": {
                                            "type": "string"
                                        },
                                        "createdTimeUTC": {
                                            "type": "string"
                                        },
                                        "groupId": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "Initialize_-_Azure_Queue_Message": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Azure Queue Message",
                                        "type": "string",
                                        "value": "{\n  \"GroupId\" : \"@{triggerBody()?['groupId']}\",\n  \"SiteUrl\" : \"@{triggerBody()?['webUrl']}\" \n}"
                                    }
                                ]
                            }
                        },
                        "Put_a_message_on_a_queue_(V2)": {
                            "runAfter": {
                                "Initialize_-_Azure_Queue_Message": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "@variables('Azure Queue Message')",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azurequeues']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/v2/storageAccounts/@{encodeURIComponent(encodeURIComponent('AccountNameFromSettings'))}/queues/@{encodeURIComponent('ps-queue-items')}/messages"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azurequeues": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('storageAccountApiConnectionName'))]",
                                "connectionName": "azurequeues",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azurequeues')]"
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "[variables('sendEmailLogicAppName')]",
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('office365ApiConnectionName'))]"
            ],
            "location": "[resourceGroup().location]",
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/schemas/2016-06-01/Microsoft.Logic.json",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "SiteUrl": {
                                            "type": "string"
                                        },
                                        "OwnerEmailAddresses": {
                                            "type": "string"
                                        },
                                        "DisplayName": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "actions": {
                        "Initialize_variable_-_Email_Message_Body": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Email Message Body",
                                        "type": "string",
                                        "value": "[parameters('emailBody')]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_Email_Message_Subject": {
                            "runAfter": {
                                "Initialize_variable_-_Email_Message_Body": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Email Message Subject",
                                        "type": "string",
                                        "value": "[parameters('emailSubject')]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_Email_Message_Mailbox": {
                            "runAfter": {
                                "Initialize_variable_-_Email_Message_Subject": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Email Message Mailbox",
                                        "type": "string",
                                        "value": "[parameters('mailboxAddress')]"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_Email_Message_To_Address": {
                            "runAfter": {
                                "Initialize_variable_-_Email_Message_Mailbox": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Email Message To Address",
                                        "type": "string",
                                        "value": "@triggerBody()?['OwnerEmailAddresses']"
                                    }
                                ]
                            }
                        },
                        "Send_an_email_from_a_shared_mailbox_(V2)": {
                            "runAfter": {
                                "Initialize_variable_-_Email_Message_To_Address": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": {
                                    "Body": "<p>@{variables('Email Message Body')}</p>",
                                    "MailboxAddress": "@variables('Email Message Mailbox')",
                                    "Subject": "@variables('Email Message Subject')",
                                    "To": "@variables('Email Message To Address')"
                                },
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['office365']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/v2/SharedMailbox/Mail"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "office365": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('office365ApiConnectionName'))]",
                                "connectionName": "office365",
                                "id": "[concat('subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                            }
                        }
                    }
                }
            }
        },
        {
            "type": "microsoft.insights/components",
            "apiVersion": "2020-02-02-preview",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
            ],
            "name": "[variables('applicationInsightsName')]",
            "location": "[resourceGroup().location]",
            "kind": "web",
            "properties": {
                "RetentionInDays": 90,
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]",
                "IngestionMode": "LogAnalytics",
                "Application_Type": "other",
                "ApplicationId": "[variables('applicationInsightsName')]",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2020-08-01",
            "name": "[variables('logAnalyticsName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                },
                "retentionInDays": 90
            }
        }
    ],
    "outputs": {
        "QueueMesssageLogicAppUri": {
            "type": "string",
            "value": "[listCallbackURL(resourceId('Microsoft.Logic/workflows/triggers', variables('queueMsgLogicAppName'), 'manual'), '2019-05-01').value]"
        },
        "SendEmailLogicAppUri": {
            "type": "string",
            "value": "[listCallbackURL(resourceId('Microsoft.Logic/workflows/triggers', variables('sendEmailLogicAppName'), 'manual'), '2019-05-01').value]"
        },
        "FunctionAppName": {
            "type": "string",
            "value": "[variables('functionAppName')]"
        }
    }
}
